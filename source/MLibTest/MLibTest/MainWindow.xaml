<MWindow:MetroWindow x:Class="MLibTest.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        
        x:Name="mainWindow"
        xmlns:MWindow="clr-namespace:MWindowLib;assembly=MWindowLib"
        xmlns:demos="clr-namespace:MLibTest.Demos"
        xmlns:demoviews="clr-namespace:MLibTest.Demos.Views"
        xmlns:advConv="clr-namespace:Xceed.Wpf.AvalonDock.Converters;assembly=Xceed.Wpf.AvalonDock"
        
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid xmlns:bindLocal="clr-namespace:MLibTest.Demos"
          xmlns:ThemeBehav="clr-namespace:MLib.Behaviors;assembly=MLib"
          
          xmlns:avalonDock="clr-namespace:Xceed.Wpf.AvalonDock;assembly=Xceed.Wpf.AvalonDock"
          xmlns:avalonDockControls="clr-namespace:Xceed.Wpf.AvalonDock.Controls;assembly=Xceed.Wpf.AvalonDock"
          xmlns:avalonDockLayout="clr-namespace:Xceed.Wpf.AvalonDock.Layout;assembly=Xceed.Wpf.AvalonDock"
          xmlns:conv="clr-namespace:MLibTest.Demos.Demos.Converters"
        >
        <Grid.Resources>
            <conv:ActiveDocumentConverter x:Key="ActiveDocumentConverter"/>
            <advConv:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="16"/>
        </Grid.RowDefinitions>

        <Menu>
            <Menu.Resources>
                <!-- Use a proxy to bind items to root object of this collection -->
                <bindLocal:BindingProxy x:Key="MenuItemsProxy" Data="{Binding}" />
            </Menu.Resources>
            <MenuItem Header="File">
                <MenuItem Header="New" Command="{Binding AD_WorkSpace.NewCommand}"/>
                <MenuItem Header="Open" Command="{Binding AD_WorkSpace.OpenCommand}"/>
                <Separator/>
                <MenuItem Header="Save" Command="{Binding AD_WorkSpace.ActiveDocument.SaveCommand}"/>
                <MenuItem Header="Save As..." Command="{Binding AD_WorkSpace.ActiveDocument.SaveAsCommand}"/>
                <Separator/>
                <MenuItem Header="Close" Command="{Binding AD_WorkSpace.ActiveDocument.CloseCommand}"/>
            </MenuItem>
            <MenuItem Header="Layout">
                <MenuItem Header="Load" Command="{Binding LoadLayoutCommand, ElementName=mainWindow}"/>
                <MenuItem Header="Save" Command="{Binding SaveLayoutCommand, ElementName=mainWindow}"/>
                <MenuItem Header="Dump to Console" Click="OnDumpToConsole"/>
            </MenuItem>
            <MenuItem Header="Tools">
                <MenuItem Header="Themes"
                                  ItemsSource="{Binding AppTheme.ListOfThemes}"
                                  IsEnabled="{Binding AppTheme.IsEnabled, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                  DisplayMemberPath="Model.DisplayName"
                              >
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <!-- Setter Property="Header" Value="{Binding Model.Name, Mode=OneWay}" / -->
                            <Setter Property="IsChecked" Value="{Binding IsSelected, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" />
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="Command" Value="{Binding Path=Data.ThemeSelectionChangedCommand, Source={StaticResource MenuItemsProxy}}" />
                            <Setter Property="CommandParameter" Value="{Binding}" />
                            <!-- Send this item for processing to the bound command -->
                            <Setter Property="ThemeBehav:MergeStyleBehaviour.AutoMergeStyle" Value="True"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="File Stats" IsChecked="{Binding AD_WorkSpace.FileStats.IsVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" IsCheckable="True"/>
                <MenuItem Header="Color Picker" IsChecked="{Binding AD_WorkSpace.ColorPicker.IsVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" IsCheckable="True"/>
                <MenuItem Header="Tool1" IsChecked="{Binding AD_WorkSpace.Tool1.IsVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" IsCheckable="True"/>
                <MenuItem Header="Tool2" IsChecked="{Binding AD_WorkSpace.Tool2.IsVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" IsCheckable="True"/>
                <MenuItem Header="Tool3" IsChecked="{Binding AD_WorkSpace.Tool3.IsVisible, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" IsCheckable="True"/>
            </MenuItem>
        </Menu>

        <TabControl Grid.Row="1">
            <TabItem Name="tab1" Header="tab 1">
                <avalonDock:DockingManager x:Name="dockManager"
                                   DataContext="{Binding AD_WorkSpace}"
                                   AnchorablesSource="{Binding Tools}" 
                                   DocumentsSource="{Binding Files}"
                                   ActiveContent="{Binding ActiveDocument, Mode=TwoWay, Converter={StaticResource ActiveDocumentConverter}}"
                                   Grid.Row="1"
                                   Visibility="Hidden"
                                   >
                    <!-- avalonDock:DockingManager.Theme>
                <avalonDock:Vs2013LightTheme/>
            </avalonDock:DockingManager.Theme -->
                    <avalonDock:DockingManager.LayoutItemTemplateSelector>
                        <demos:PanesTemplateSelector>
                            <demos:PanesTemplateSelector.FileViewTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <TextBox
                                    Text="{Binding TextContent, UpdateSourceTrigger=PropertyChanged}"
                                    TextWrapping="Wrap"
                                    AcceptsReturn="True"
                                    BorderThickness="0" />
                                    </Grid>
                                </DataTemplate>
                            </demos:PanesTemplateSelector.FileViewTemplate>
                            <demos:PanesTemplateSelector.FileStatsViewTemplate>
                                <DataTemplate>
                                    <Border Padding="6">
                                        <StackPanel Orientation="Vertical">
                                            <TextBlock Text="{Binding FileSize}"/>
                                            <TextBlock Text="{Binding LastModified}"/>
                                            <TextBox Text="test"/>
                                        </StackPanel>
                                    </Border>
                                </DataTemplate>
                            </demos:PanesTemplateSelector.FileStatsViewTemplate>
                            <demos:PanesTemplateSelector.ColorPickerViewTemplate>
                                <DataTemplate>
                                    <Border Padding="6">
                                        <ScrollViewer>
                                            <demoviews:ColorSelectionView />
                                        </ScrollViewer>
                                    </Border>
                                </DataTemplate>
                            </demos:PanesTemplateSelector.ColorPickerViewTemplate>
                            <demos:PanesTemplateSelector.Tooln_ViewTemplate>
                                <DataTemplate>
                                    <Border Padding="6">
                                        <StackPanel Orientation="Vertical">
                                            <TextBlock Text="I am a ToolWindow test implementation"/>
                                        </StackPanel>
                                    </Border>
                                </DataTemplate>
                            </demos:PanesTemplateSelector.Tooln_ViewTemplate>
                        </demos:PanesTemplateSelector>
                    </avalonDock:DockingManager.LayoutItemTemplateSelector>

                    <avalonDock:DockingManager.LayoutItemContainerStyleSelector>
                        <demos:PanesStyleSelector>
                            <demos:PanesStyleSelector.ToolStyle>
                                <!-- Define Style of a Tool Window View -->
                                <Style TargetType="{x:Type avalonDockControls:LayoutAnchorableItem}">
                                    <Setter Property="Title" Value="{Binding Model.Title}"/>
                                    <Setter Property="IconSource" Value="{Binding Model.IconSource}"/>
                                    <Setter Property="Visibility" Value="{Binding Model.IsVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}"/>
                                    <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                                    <Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
                                    <Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}"/>
                                    <Setter Property="CanHide" Value="True" />
                                </Style>
                            </demos:PanesStyleSelector.ToolStyle>
                            <demos:PanesStyleSelector.FileStyle>
                                <!-- Define Style of a Document View -->
                                <Style TargetType="{x:Type avalonDockControls:LayoutItem}">
                                    <Setter Property="Title" Value="{Binding Model.Title}"/>
                                    <Setter Property="ToolTip" Value="{Binding Model.FilePath}"/>
                                    <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}"/>
                                    <Setter Property="IconSource" Value="{Binding Model.IconSource}"/>
                                    <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
                                </Style>
                            </demos:PanesStyleSelector.FileStyle>
                        </demos:PanesStyleSelector>
                    </avalonDock:DockingManager.LayoutItemContainerStyleSelector>
                    <avalonDock:DockingManager.LayoutUpdateStrategy>
                        <demos:LayoutInitializer/>
                    </avalonDock:DockingManager.LayoutUpdateStrategy>

                    <avalonDockLayout:LayoutRoot>
                        <avalonDockLayout:LayoutPanel Orientation="Vertical">
                            <avalonDockLayout:LayoutDocumentPane/>
                            <avalonDockLayout:LayoutAnchorablePane Name="ToolsPane" DockHeight="150" DockMinWidth="250">
                            </avalonDockLayout:LayoutAnchorablePane>
                        </avalonDockLayout:LayoutPanel>
                    </avalonDockLayout:LayoutRoot>
                </avalonDock:DockingManager>
            </TabItem>
            <TabItem Name="tab2" Header="tab 2">
                <TextBlock Text="tab2 is just for testing load/unload control in tab1"></TextBlock>
            </TabItem>
        </TabControl>
    </Grid>
</MWindow:MetroWindow>
